/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package pl.edu.pwr.party_organizer.api;

import pl.edu.pwr.party_organizer.model.Party;
import pl.edu.pwr.party_organizer.model.PartyDTO;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;
import org.springframework.web.bind.annotation.CrossOrigin;


@CrossOrigin(origins = "http://localhost:4200")
@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-06-22T02:40:28.913336600+02:00[Europe/Warsaw]")
@Validated
@Tag(name = "Parties", description = "Operations related to parties")
public interface PartiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /parties : Create a new party
     *
     * @param party Party details (required)
     * @return Party created successfully (status code 201)
     *         or Invalid input (status code 400)
     */
    @Operation(
        operationId = "createParty",
        summary = "Create a new party",
        tags = { "Parties" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Party created successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Party.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/parties",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Party> _createParty(
        @Parameter(name = "Party", description = "Party details", required = true) @Valid @RequestBody Party party
    ) {
        return createParty(party);
    }

    // Override this method
    default  ResponseEntity<Party> createParty(Party party) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2023-07-15T00:00:00.000+00:00\", \"name\" : \"Birthday Bash\", \"guests\" : [ { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" }, { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" } ], \"description\" : \"A fun-filled birthday party for all ages\", \"location\" : \"Grand Hotel\", \"id\" : \"123e4567-e89b-12d3-a456-426655440000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /parties/{partyId} : Delete party
     *
     * @param partyId ID of the party (required)
     * @return Party deleted successfully (status code 204)
     *         or Party not found (status code 404)
     */
    @Operation(
        operationId = "deleteParty",
        summary = "Delete party",
        tags = { "Parties" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Party deleted successfully"),
            @ApiResponse(responseCode = "404", description = "Party not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/parties/{partyId}"
    )
    default ResponseEntity<Void> _deleteParty(
        @Parameter(name = "partyId", description = "ID of the party", required = true, in = ParameterIn.PATH) @PathVariable("partyId") String partyId
    ) {
        return deleteParty(partyId);
    }

    // Override this method
    default  ResponseEntity<Void> deleteParty(String partyId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /parties : Get all parties
     *
     * @return Successful operation (status code 200)
     */
    @Operation(
        operationId = "getAllParties",
        summary = "Get all parties",
        tags = { "Parties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Party.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/parties",
        produces = { "application/json" }
    )
    default ResponseEntity<List<Party>> _getAllParties(
        
    ) {
        return getAllParties();
    }

    // Override this method
    default  ResponseEntity<List<Party>> getAllParties() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2023-07-15T00:00:00.000+00:00\", \"name\" : \"Birthday Bash\", \"guests\" : [ { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" }, { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" } ], \"description\" : \"A fun-filled birthday party for all ages\", \"location\" : \"Grand Hotel\", \"id\" : \"123e4567-e89b-12d3-a456-426655440000\" }, { \"date\" : \"2023-07-15T00:00:00.000+00:00\", \"name\" : \"Birthday Bash\", \"guests\" : [ { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" }, { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" } ], \"description\" : \"A fun-filled birthday party for all ages\", \"location\" : \"Grand Hotel\", \"id\" : \"123e4567-e89b-12d3-a456-426655440000\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /parties/{partyId} : Get party by ID
     *
     * @param partyId ID of the party (required)
     * @return Successful operation (status code 200)
     *         or Party not found (status code 404)
     */
    @Operation(
        operationId = "getPartyById",
        summary = "Get party by ID",
        tags = { "Parties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Party.class))
            }),
            @ApiResponse(responseCode = "404", description = "Party not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/parties/{partyId}",
        produces = { "application/json" }
    )
    default ResponseEntity<Party> _getPartyById(
        @Parameter(name = "partyId", description = "ID of the party", required = true, in = ParameterIn.PATH) @PathVariable("partyId") String partyId
    ) {
        return getPartyById(partyId);
    }

    // Override this method
    default  ResponseEntity<Party> getPartyById(String partyId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2023-07-15T00:00:00.000+00:00\", \"name\" : \"Birthday Bash\", \"guests\" : [ { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" }, { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" } ], \"description\" : \"A fun-filled birthday party for all ages\", \"location\" : \"Grand Hotel\", \"id\" : \"123e4567-e89b-12d3-a456-426655440000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /parties/{partyId} : Update party
     *
     * @param partyId ID of the party (required)
     * @param party Party details (required)
     * @return Party updated successfully (status code 200)
     *         or Invalid input (status code 400)
     *         or Party not found (status code 404)
     */
    @Operation(
        operationId = "updateParty",
        summary = "Update party",
        tags = { "Parties" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Party updated successfully", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Party.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid input"),
            @ApiResponse(responseCode = "404", description = "Party not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/parties/{partyId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<Party> _updateParty(
        @Parameter(name = "partyId", description = "ID of the party", required = true, in = ParameterIn.PATH) @PathVariable("partyId") String partyId,
        @Parameter(name = "Party", description = "Party details", required = true) @Valid @RequestBody Party party
    ) {
        return updateParty(partyId, party);
    }

    // Override this method
    default  ResponseEntity<Party> updateParty(String partyId, Party party) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"date\" : \"2023-07-15T00:00:00.000+00:00\", \"name\" : \"Birthday Bash\", \"guests\" : [ { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" }, { \"name\" : \"John Doe\", \"id\" : \"987e6543-e21b-34d5-c654-098765432100\", \"email\" : \"john.doe@example.com\" } ], \"description\" : \"A fun-filled birthday party for all ages\", \"location\" : \"Grand Hotel\", \"id\" : \"123e4567-e89b-12d3-a456-426655440000\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
